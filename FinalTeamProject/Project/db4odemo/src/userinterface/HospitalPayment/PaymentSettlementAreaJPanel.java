/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.HospitalPayment;

import Business.CustomerPolicy.Policy;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Location;
import Business.Organizations.ClaimHandlerOrganizations;
import Business.Organizations.CustomerAgentOrganization;
import Business.Restaurant.Restaurant;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import Business.Organizations.Organization;
import Business.WorkQueue.CustomerProductWorkRequest;
import Business.WorkQueue.HospitalPaymentSettlementWorkRequest;
import Business.WorkQueue.InsuranceProductWorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class PaymentSettlementAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;

    private UserAccount userAccount;
    private EcoSystem system;

    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    public PaymentSettlementAreaJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem system) {
        initComponents();

        this.userProcessContainer = userProcessContainer;

        this.userAccount = account;
        this.system = system;
        //valueLabel.setText(enterprise.getName());
        populateRequestTable();

        populatePolicyable();
        DiagnosisjLabel1.setVisible(false);
        DaignosisjTextArea1.setVisible(false);
        TotalamountjLabel2.setVisible(false);
        AmountjTextField1.setVisible(false);
        SubmitjButton1.setVisible(false);
    }

    private void populatePolicyable() {
        DefaultTableModel model = (DefaultTableModel) PolicyJTable.getModel();

        model.setRowCount(0);
        for (Policy policy : system.getCustPolicyDirectory().getPolicyList()) {
            if (policy != null) {
                Object[] row = new Object[10];
                row[0] = policy.getCustProdWQ().getNetwork();
                row[1] = policy.getCustProdWQ().getEnterprise();
                row[2] = policy.getCustomerName();
                row[3] = policy;
                row[4] = policy.getInsuranceName();
                row[5] = policy.getCustProdWQ().getPremuim();
                row[6] = policy.getCustProdWQ().getCoverageAmount();
                row[7] = policy.getCustProdWQ().getProductDescription();
                //row[7] = iP.getMessage();
                // row[8] = iP.getStatus();
                //row[7] = iP;

                // row[9]=iP.
                model.addRow(row);
            }
        }

    }

    public void populateRequestTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()) {
            if (request.getClass().equals(HospitalPaymentSettlementWorkRequest.class)) {
                HospitalPaymentSettlementWorkRequest orderedProduct = (HospitalPaymentSettlementWorkRequest) request;
                Object[] row = new Object[8];
                row[0] = orderedProduct.getSettlementRequestIdStr();
                row[1] = orderedProduct.getPolicy();
                row[2] = orderedProduct.getPolicy().getCustomerName();
                row[3] = orderedProduct.getDiagnosis();
                row[4] = orderedProduct.getBillAmout();
               // row[5] = orderedProduct.getDiagnosis();
                row[5] = orderedProduct.getStatus();
               // String result = ((HospitalPaymentSettlementWorkRequest) orderedProduct).get();
                // row[3] = result == null ? "Waiting" : result;

                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        requestTestJButton = new javax.swing.JButton();
        refreshTestJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        PolicyJTable = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        DaignosisjTextArea1 = new javax.swing.JTextArea();
        DiagnosisjLabel1 = new javax.swing.JLabel();
        AmountjTextField1 = new javax.swing.JTextField();
        TotalamountjLabel2 = new javax.swing.JLabel();
        SubmitjButton1 = new javax.swing.JButton();

        requestTestJButton.setText("Initiate Cliam");
        requestTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTestJButtonActionPerformed(evt);
            }
        });

        refreshTestJButton.setText("Refresh");
        refreshTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTestJButtonActionPerformed(evt);
            }
        });

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "RequestID", "PolicyID", "Customer Name", "Daignosis", "Claimed Amount", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(workRequestJTable);

        PolicyJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Network", "Enterprise", "CustomerName", "Policy", "PolicyName", "Premium", "Coverage Amount", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(PolicyJTable);

        DaignosisjTextArea1.setColumns(20);
        DaignosisjTextArea1.setRows(5);
        jScrollPane1.setViewportView(DaignosisjTextArea1);

        DiagnosisjLabel1.setText("Daignosis:");

        AmountjTextField1.setText("jTextField1");

        TotalamountjLabel2.setText("Total Amount");

        SubmitjButton1.setText("Submit");
        SubmitjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitjButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(refreshTestJButton)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 880, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(requestTestJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DiagnosisjLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(TotalamountjLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(AmountjTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SubmitjButton1))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(62, 62, 62))
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 851, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshTestJButton)
                    .addComponent(DiagnosisjLabel1))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(requestTestJButton)
                    .addComponent(AmountjTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TotalamountjLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SubmitjButton1))
                .addGap(56, 56, 56)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void requestTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTestJButtonActionPerformed

        int selectedRow = PolicyJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Select a row first.");
            return;
        }
        if (selectedRow >= 0) {
            DiagnosisjLabel1.setVisible(true);
            DaignosisjTextArea1.setVisible(true);
            TotalamountjLabel2.setVisible(true);
            AmountjTextField1.setVisible(true);
            SubmitjButton1.setVisible(true);
        }

       


    }//GEN-LAST:event_requestTestJButtonActionPerformed

    private void refreshTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTestJButtonActionPerformed

        populateRequestTable();

    }//GEN-LAST:event_refreshTestJButtonActionPerformed

    private void SubmitjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitjButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = PolicyJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Select a row first.");
            return;
        }
         if (selectedRow >= 0) {
             
            Policy policy = (Policy) PolicyJTable.getValueAt(selectedRow, 3);
            HospitalPaymentSettlementWorkRequest paymenRequest = new HospitalPaymentSettlementWorkRequest();
            //if(policy.et)
            paymenRequest.setPolicy(policy);
            if(DaignosisjTextArea1.getText().equals(""))
            {
                JOptionPane.showMessageDialog(null, "Please add Daignosis.");
                return;
            }
            if(AmountjTextField1.getText().equals(""))
            {
                JOptionPane.showMessageDialog(null, "Please add total Bill Amount");
                return;
            }
            if(Integer.parseInt(AmountjTextField1.getText())>Integer.parseInt(policy.getCustProdWQ().getCoverageAmount()))
            {
                JOptionPane.showMessageDialog(null, "Claimed amount cannot be more than covered amount");
                return;
            }
            paymenRequest.setDiagnosis(DaignosisjTextArea1.getText());
            paymenRequest.setBillAmout(AmountjTextField1.getText());
            
                //custRequest.setRequestDate(daet);
                paymenRequest.setSender(userAccount);

                paymenRequest.setApprovalStage("0");

                Organization org = null;

                for (Location network : system.getNetworkList()) {
                    for (Enterprise entp : network.getEnterpriseDirectory().getEnterpriseList()) {
                        if (entp.getEnterpriseType().getValue().equals(Enterprise.EnterpriseType.InsuranceBroker.getValue())) {
                            entp.getWorkQueue().getWorkRequestList().add(paymenRequest);
                            for (Organization organization : entp.getOrganizaionDirectory().getOrganizationList()) {
                                if (organization instanceof ClaimHandlerOrganizations) {
                                    org = organization;
                                    break;
                                }

                            }
                        }
                    }
                }

                if (org != null) {
                    org.getWorkQueue().getWorkRequestList().add(paymenRequest);
                    paymenRequest.setStatus("Claim Request Initiated");
                    userAccount.getWorkQueue().getWorkRequestList().add(paymenRequest);
                    JOptionPane.showMessageDialog(null, "Claim Request Initiated");
                }
        DiagnosisjLabel1.setVisible(false);
        DaignosisjTextArea1.setVisible(false);
        TotalamountjLabel2.setVisible(false);
        AmountjTextField1.setVisible(false);
        SubmitjButton1.setVisible(false);
            
         }
        
        populateRequestTable();
    }//GEN-LAST:event_SubmitjButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AmountjTextField1;
    private javax.swing.JTextArea DaignosisjTextArea1;
    private javax.swing.JLabel DiagnosisjLabel1;
    private javax.swing.JTable PolicyJTable;
    private javax.swing.JButton SubmitjButton1;
    private javax.swing.JLabel TotalamountjLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton refreshTestJButton;
    private javax.swing.JButton requestTestJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
