/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.Customer.Customer;
import Business.Customer.CustomerDirectory;
import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Restaurant.Restaurant;
import Business.Network.Location;
import Business.Role.CustomerRole;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class ManageCustomerJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem system;

    /**
     * Creates new form ManageEnterpriseJPanel
     */
    public ManageCustomerJPanel(JPanel userProcessContainer, EcoSystem system) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.system = system;

        populateTable();
        populateNetworkComboBox();
        Reslable.setVisible(false);
        enterpriseJComboBox.setVisible(false);
         UpdatejButton.setEnabled(false); 
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) enterpriseJTable.getModel();

        model.setRowCount(0);
      //  for (Location network : system.getNetworkList()) {
          //  for (Restaurant restaurant : network.getRestaurantDirectory().getRestaurantList()) {
                for (Customer cust : system.getCustomerDirectory().getCustomerList()) {
                    Object[] row = new Object[4];
                    row[0] = cust.getName();//restaurant.getName();
                    // network.getName();
                    row[1] = cust.getUsername();
                    row[2] =cust.getAddress();
                    row[3]=cust;

                    model.addRow(row);
                }
            //
       // }
    }

    private void populateNetworkComboBox(){
        networkJComboBox.removeAllItems();
        
        for (Location network : system.getNetworkList()){
            networkJComboBox.addItem(network);
        }
    }
    
    private void populateEnterpriseComboBox(Location network){
        enterpriseJComboBox.removeAllItems();
        
        for (Restaurant restaurant : network.getRestaurantDirectory().getRestaurantList()){
            enterpriseJComboBox.addItem(restaurant);
        }
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        enterpriseJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        networkJComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        usernameJTextField = new javax.swing.JTextField();
        Reslable = new javax.swing.JLabel();
        enterpriseJComboBox = new javax.swing.JComboBox();
        submitJButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        nameJTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        passwordJPasswordField = new javax.swing.JPasswordField();
        backJButton = new javax.swing.JButton();
        AddressTextbox = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        UpdatejButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 151, 238));

        enterpriseJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Customer Name", "Username", "Address", "Customer"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(enterpriseJTable);

        jLabel1.setText("Network");

        networkJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        networkJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                networkJComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Username");

        Reslable.setText("Restaurant");

        enterpriseJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        submitJButton.setText("Submit");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Password");

        jLabel5.setText("Name");

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jLabel12.setText("Address");

        jButton1.setText("View");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        UpdatejButton.setText("Update");
        UpdatejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatejButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(networkJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Reslable, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(enterpriseJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(usernameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addComponent(passwordJPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(AddressTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(submitJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(backJButton)
                                    .addComponent(UpdatejButton))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(networkJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enterpriseJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Reslable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(usernameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(passwordJPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(nameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(UpdatejButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddressTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(submitJButton)
                    .addComponent(backJButton))
                .addContainerGap(109, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void networkJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_networkJComboBoxActionPerformed

        Location network = (Location) networkJComboBox.getSelectedItem();
        if (network != null){
            populateEnterpriseComboBox(network);
        }
        
        
    }//GEN-LAST:event_networkJComboBoxActionPerformed

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed
        
        Restaurant restaurant = (Restaurant) enterpriseJComboBox.getSelectedItem();
         boolean flag = true;
        
        if (nameJTextField.getText().equals("")){  //User have not entered anything. 
        JOptionPane.showMessageDialog(null,"Customer Can't be empty");
        nameJTextField.requestFocusInWindow();
        nameJTextField.setText("");
        flag = false;
        }
        if (usernameJTextField.getText().equals("")){  //User have not entered anything. 
        JOptionPane.showMessageDialog(null,"Customer UserName Can't be empty");
        usernameJTextField.requestFocusInWindow();
        usernameJTextField.setText("");
        flag = false;
        }
         if (String.valueOf(passwordJPasswordField.getPassword()).equals("")){  //User have not entered anything. 
        JOptionPane.showMessageDialog(null,"Customer Password Can't be empty");
        passwordJPasswordField.requestFocusInWindow();
        passwordJPasswordField.setText("");
        flag = false;
        }
         if (AddressTextbox.getText().equals("")){  //User have not entered anything. 
        JOptionPane.showMessageDialog(null,"Customer Address Can't be empty");
        AddressTextbox.requestFocusInWindow();
        AddressTextbox.setText("");
        flag = false;
        }
        
       // String name=
       if(flag){
           String name =nameJTextField.getText();
        String username = usernameJTextField.getText();
        String password = String.valueOf(passwordJPasswordField.getPassword());
        String address = AddressTextbox.getText();
        
        String location = ((Location)networkJComboBox.getSelectedItem()).getName();
        //Employee employee = restaurant.getEmployeeDirectory().createEmployee(name);
         //UserAccount account = system.getUserAccountDirectory().createUserAccount(username, password, null, new CustomerRole());
         
         for (UserAccount account : system.getUserAccountDirectory().getUserAccountList()){
            if(account.getUsername().equals(username))
            {
               JOptionPane.showMessageDialog(null,"Duplicate Username"); 
               return;
            }
             
             
        }
         
        Customer customer = new Customer( location,  name,  username,  address,  "5");
      CustomerDirectory cd = system.getCustomerDirectory();
              cd.createCustomer(customer);
             
    //  system.getCustomerDirectory().getCustomerList().add(customer);
               //.getCustomerList().add(customer);
      // CustomerList.add(customer);
        
        UserAccount account = system.getUserAccountDirectory().createUserAccount(username, password, null, new CustomerRole());
        
       }
       populateTable();
        
    }//GEN-LAST:event_submitJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
         Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
       // SystemAdminWorkAreaJPanel sysAdminwjp = (SystemAdminWorkAreaJPanel) component;
       // sysAdminwjp.populateTree();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        int selectedRow =  enterpriseJTable.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row from table first to view details.", "Warning",JOptionPane.WARNING_MESSAGE);
        }else{
            Customer  cust = (Customer) enterpriseJTable.getValueAt(selectedRow, 3);
            usernameJTextField.setText(cust.getUsername());
            nameJTextField.setText(cust.getName());
            AddressTextbox.setText(cust.getAddress());
           // passwordJPasswordField
            //passwordJPasswordField.setText(cust.g);
        }
         UpdatejButton.setEnabled(true); 
         usernameJTextField.setEnabled(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void UpdatejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdatejButtonActionPerformed
        // TODO add your handling code here:
        
       // Customer  cust = (Customer) enterpriseJTable.getValueAt(selectedRow, 3);
       int selectedRow =  enterpriseJTable.getSelectedRow();
       Customer  cust = new Customer();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row from table first to view details.", "Warning",JOptionPane.WARNING_MESSAGE);
        }else{
              cust = (Customer) enterpriseJTable.getValueAt(selectedRow, 3);
        }
        Restaurant restaurant = (Restaurant) enterpriseJComboBox.getSelectedItem();
         boolean flag = true;
        
        if (nameJTextField.getText().equals("")){  //User have not entered anything. 
        JOptionPane.showMessageDialog(null,"Customer Can't be empty");
        nameJTextField.requestFocusInWindow();
        nameJTextField.setText("");
        flag = false;
        }
        if (usernameJTextField.getText().equals("")){  //User have not entered anything. 
        JOptionPane.showMessageDialog(null,"Customer UserName Can't be empty");
        usernameJTextField.requestFocusInWindow();
        usernameJTextField.setText("");
        flag = false;
        }
         if (String.valueOf(passwordJPasswordField.getPassword()).equals("")){  //User have not entered anything. 
        JOptionPane.showMessageDialog(null,"Customer Password Can't be empty");
        passwordJPasswordField.requestFocusInWindow();
        passwordJPasswordField.setText("");
        flag = false;
        }
         if (AddressTextbox.getText().equals("")){  //User have not entered anything. 
        JOptionPane.showMessageDialog(null,"Customer Address Can't be empty");
        AddressTextbox.requestFocusInWindow();
        AddressTextbox.setText("");
        flag = false;
        }
        
       // String name=
       if(flag){
           String name =nameJTextField.getText();
        String username = usernameJTextField.getText();
        String password = String.valueOf(passwordJPasswordField.getPassword());
        String address = AddressTextbox.getText();
        
        String location = ((Location)networkJComboBox.getSelectedItem()).getName();
        //Employee employee = restaurant.getEmployeeDirectory().createEmployee(name);
         //UserAccount account = system.getUserAccountDirectory().createUserAccount(username, password, null, new CustomerRole());
         
        /* for (UserAccount account : system.getUserAccountDirectory().getUserAccountList()){
            if(account.getUsername().equals(username))
            {
               JOptionPane.showMessageDialog(null,"Duplicate Username"); 
               return;
            }
             
             
        }*/
         
        Customer customer = new Customer( location,  name,  username,  address,  "5");
       
       
        int k = system.getCustomerDirectory().getCustomerList().indexOf(cust);
        system.getCustomerDirectory().getCustomerList().set(k, customer);
        UpdatejButton.setEnabled(false); 
      /*  btnUpdate.setEnabled(true);
        Txt_PlaneAirLineID.setEditable(false);
        Txt_PlaneModel.setEditable(false);
        Txt_Capacity.setEditable(false);
        */

        JOptionPane.showMessageDialog(null, "updated successfully!");
        populateTable();
    }//GEN-LAST:event_UpdatejButtonActionPerformed
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AddressTextbox;
    private javax.swing.JLabel Reslable;
    private javax.swing.JButton UpdatejButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JComboBox enterpriseJComboBox;
    private javax.swing.JTable enterpriseJTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameJTextField;
    private javax.swing.JComboBox networkJComboBox;
    private javax.swing.JPasswordField passwordJPasswordField;
    private javax.swing.JButton submitJButton;
    private javax.swing.JTextField usernameJTextField;
    // End of variables declaration//GEN-END:variables
}
