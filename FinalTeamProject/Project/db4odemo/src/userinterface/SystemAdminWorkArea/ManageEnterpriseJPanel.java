/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Location;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import Business.Utilities.Validation;

/**
 *
 * @author raunak
 */
public class ManageEnterpriseJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem system;
     private Validation valid;

    /**
     * Creates new form ManageEnterpriseJPanel
     */
    public ManageEnterpriseJPanel(JPanel userProcessContainer, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;

        populateTable();
        populateComboBox();
          btnUpdateConfirm.setEnabled(false); 
         // btnUpdateConfirm.setEnabled(true); 
         btnView.setEnabled(true); 
         enterpriseTypeJComboBox.setEnabled(true);
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) enterpriseJTable.getModel();

        model.setRowCount(0);
        ArrayList<Enterprise> NoEnterpriseExists= new ArrayList<Enterprise>();
        for (Location network : system.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory()==null? NoEnterpriseExists:network.getEnterpriseDirectory().getEnterpriseList()) {
               if(enterprise!=null){
                Object[] row = new Object[6];
                row[0] = network;
                row[1] = enterprise;
                row[2]= enterprise.getEnterpriseType();
               

                model.addRow(row);
               }
            }
        }
     //  enterpriseJTable.getColumnModel().getColumn(3).setMaxWidth(0); 
     //  enterpriseJTable.getColumnModel().getColumn(4).setMaxWidth(0); 
    }

    private void populateComboBox() {
        networkJComboBox.removeAllItems();
        enterpriseTypeJComboBox.removeAllItems();

        for (Location network : system.getNetworkList()) {
            networkJComboBox.addItem(network);
        }

        for (Enterprise.EnterpriseType type : Enterprise.EnterpriseType.values()) {
            enterpriseTypeJComboBox.addItem(type);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        enterpriseJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        networkJComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        nameJTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        enterpriseTypeJComboBox = new javax.swing.JComboBox();
        DeleteJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        submitJButton = new javax.swing.JButton();
        btnUpdateConfirm = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnUpdateConfirm1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 151, 238));

        enterpriseJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Network", "Enterprise Name", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(enterpriseJTable);
        if (enterpriseJTable.getColumnModel().getColumnCount() > 0) {
            enterpriseJTable.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel1.setText("Network");

        networkJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Name");

        jLabel3.setText("Enterprise Type");

        enterpriseTypeJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        DeleteJButton.setText("Delete");
        DeleteJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteJButtonActionPerformed(evt);
            }
        });

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        submitJButton.setText("Submit");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });

        btnUpdateConfirm.setText("Confirm Update");
        btnUpdateConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateConfirmActionPerformed(evt);
            }
        });

        btnView.setText("Update");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnUpdateConfirm1.setText("Reset Buttons");
        btnUpdateConfirm1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateConfirm1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(88, 88, 88)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(backJButton)))
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(networkJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(enterpriseTypeJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(65, 65, 65)
                                .addComponent(btnUpdateConfirm1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(submitJButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(DeleteJButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnView)
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdateConfirm))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(networkJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdateConfirm1))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(enterpriseTypeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backJButton)
                    .addComponent(submitJButton)
                    .addComponent(DeleteJButton)
                    .addComponent(btnUpdateConfirm)
                    .addComponent(btnView))
                .addContainerGap(66, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void DeleteJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteJButtonActionPerformed

         int selectedRow = enterpriseJTable.getSelectedRow();
        if(selectedRow >= 0){
             Enterprise restaurant = (Enterprise) enterpriseJTable.getValueAt(selectedRow, 1);
           
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to remove this Enterprise!", "Warning", dialogButton);
            if(dialogResult == JOptionPane.YES_OPTION){
               Location lc =(Location) enterpriseJTable.getValueAt(selectedRow, 0) ;
                int index= lc.getEnterpriseDirectory().getEnterpriseList().indexOf(restaurant);
                lc.getEnterpriseDirectory().getEnterpriseList().remove(index);
                populateTable();
            
            }
        }else{
            JOptionPane.showMessageDialog(null, "Please select a row from table first.", "Warning",JOptionPane.WARNING_MESSAGE);
            
        }

    }//GEN-LAST:event_DeleteJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
         Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        SystemAdminWorkAreaJPanel sysAdminwjp = (SystemAdminWorkAreaJPanel) component;
        sysAdminwjp.populateTree();

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed

        for(Location loc: system.getNetworkList())
         {    
            for (Enterprise enterpriseL : loc.getEnterpriseDirectory().getEnterpriseList()){
               if( enterpriseL.getName().equals(nameJTextField.getText()))
               {
                  JOptionPane.showMessageDialog(null,"Duplicate Enterprise Name in same Network"); 
                   // btnUpdateConfirm.setEnabled(false); 
                  return;
               }

            }
         }
        addEnterprise();
        populateTable();
        btnView.setEnabled(true);
    }//GEN-LAST:event_submitJButtonActionPerformed

    private void btnUpdateConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateConfirmActionPerformed
        // TODO add your handling code here:
        
          int selectedRow =  enterpriseJTable.getSelectedRow();
       Enterprise  oldEnterprise = null;//= new Enterprise();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row from table first to view details.", "Warning",JOptionPane.WARNING_MESSAGE);
        }else{
              oldEnterprise = (Enterprise) enterpriseJTable.getValueAt(selectedRow, 1);
        }
      //  Enterprise newEnterprise = (Enterprise) enterpriseTypeJComboBox.getSelectedItem();
        Location oldNetwork = (Location) enterpriseJTable.getValueAt(selectedRow, 0);
        Location newNetwork = (Location) networkJComboBox.getSelectedItem();
        boolean flag=true;
       if(flag){
          int index=-1 ;
         for(Location loc: system.getNetworkList())
         {    if(index==-1)
              index =  loc.getEnterpriseDirectory().getEnterpriseList().indexOf(oldEnterprise);
         
            for (Enterprise enterpriseL : loc.getEnterpriseDirectory().getEnterpriseList()){
               if(loc.equals(newNetwork) && enterpriseL.getName().equals(nameJTextField.getText()))
               {
                  JOptionPane.showMessageDialog(null,"Duplicate Enterprise Name in same Network"); 
                    btnUpdateConfirm.setEnabled(false); 
                    btnView.setEnabled(true); 
                    submitJButton.setEnabled(true);
                    enterpriseTypeJComboBox.setEnabled(true);
                  return;
               }

            }
         }
             if(index!=-1)
             {
                    oldNetwork.getEnterpriseDirectory().getEnterpriseList().remove(index);
                   // system.getCustomerDirectory().getCustomerList().set(k, customer);
                    addEnterprise();
                    JOptionPane.showMessageDialog(null, "updated successfully!");
                    btnUpdateConfirm.setEnabled(false); 
                    btnView.setEnabled(true); 
                    submitJButton.setEnabled(true);
                    enterpriseTypeJComboBox.setEnabled(true);
                    nameJTextField.setText("");
             }

       
        }
         
        //Customer customer = new Customer( location,  name,  username,  address,  "5");
        // system.getNetworkList().get(WIDTH).getEnterpriseDirectory().get
        
        populateTable();
        
    }//GEN-LAST:event_btnUpdateConfirmActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        //
         int selectedRow =  enterpriseJTable.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row from table first to view details.", "Warning",JOptionPane.WARNING_MESSAGE);
        }else{
             Location  loc = (Location) enterpriseJTable.getValueAt(selectedRow, 0);
            networkJComboBox.setSelectedItem(loc);
            Enterprise  enterprise = (Enterprise) enterpriseJTable.getValueAt(selectedRow, 1);
            enterpriseTypeJComboBox.setSelectedItem(enterprise.getEnterpriseType());
            nameJTextField.setText(enterprise.getName());     
            
           
           // AddressTextbox.setText(enterprise.getAddress());
           // passwordJPasswordField
            //passwordJPasswordField.setText(cust.g);
        }
         btnUpdateConfirm.setEnabled(true); 
         btnView.setEnabled(false); 
         enterpriseTypeJComboBox.setEnabled(false);
         submitJButton.setEnabled(false);
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnUpdateConfirm1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateConfirm1ActionPerformed
        // TODO add your handling code here:
        nameJTextField.setText("");
         btnUpdateConfirm.setEnabled(false); 
         btnView.setEnabled(true); 
         submitJButton.setEnabled(true); 
         enterpriseTypeJComboBox.setEnabled(true);
    }//GEN-LAST:event_btnUpdateConfirm1ActionPerformed

    private void addEnterprise()
    {
         Location network = (Location) networkJComboBox.getSelectedItem();
        Enterprise.EnterpriseType type = (Enterprise.EnterpriseType) enterpriseTypeJComboBox.getSelectedItem();
          if (nameJTextField.getText().equals("")){  //User have not entered anything. 
        JOptionPane.showMessageDialog(null,"Name Can't be empty");
        nameJTextField.requestFocusInWindow();
        nameJTextField.setText("");
        return;
        }
       
      // String type  = "All";
        if (network == null || type == null) {
            JOptionPane.showMessageDialog(null, "Invalid Input!");
            return;
        }

        String name = nameJTextField.getText();
       valid = new Validation();
        boolean rtnFnVal= valid.validOnlyStr(name);   //Add
       if (rtnFnVal == false) {
            JOptionPane.showMessageDialog(null, "Only aplhanum and <space> allowed in name field");
        }
       else{
        Enterprise enterprise = network.getEnterpriseDirectory().createAndAddEnterprise(name,type);
       }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DeleteJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton btnUpdateConfirm;
    private javax.swing.JButton btnUpdateConfirm1;
    private javax.swing.JButton btnView;
    private javax.swing.JTable enterpriseJTable;
    private javax.swing.JComboBox enterpriseTypeJComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameJTextField;
    private javax.swing.JComboBox networkJComboBox;
    private javax.swing.JButton submitJButton;
    // End of variables declaration//GEN-END:variables
}
